#!/usr/bin/python3
import pathlib
import tkinter as tk
from tkinter import ttk, messagebox
import pygubu
import pathlib

from Database import Database
from Details import Details, showName, showYear

PROJECT_PATH = pathlib.Path(__file__).parent
PROJECT_UI = PROJECT_PATH / "browser.ui"


class BrowserApp:
    def __init__(self, parent):
        self.init_ui(parent)
        self.setup_tree()

    def init_ui(self, parent):
        self._builder = builder = pygubu.Builder()
        builder.add_resource_path(PROJECT_PATH)
        builder.add_from_file(PROJECT_UI)
        # Main widget
        self.mainwindow: ttk.Frame = builder.get_object("top_frame", parent)
        builder.connect_callbacks(self)

        self._name_entry = builder.get_object('name_entry', parent)
        self._year_entry = builder.get_object('year_entry', parent)
        self._radio_male = builder.get_object('radio_male')
        self._radio_female = builder.get_object('radio_female')
        self._tree = builder.get_object('show_tree', parent)
        self._radio_female.invoke()

        builder.import_variables(self)

    def setup_tree(self):
        tree = self._tree
        self.create_treeview_style()
        tree.configure(style="Custom.Treeview")  # Apply the custom style
        tree.configure(columns = (0, 1, 2, 3, 4), displaycolumns = (0, 1, 2, 3, 4))
        # n.Name, ygt.Year, ygt.Gender, nc.NameCount, ygt.Total
        tree.heading(0, text="Name", anchor=tk.W)
        tree.heading(1, text="Year")
        tree.heading(2, text="Gender")
        tree.heading(3, text="Name Count")
        tree.heading(4, text="Total Names")

        tree.column(0, width=150, anchor=tk.W)
        tree.column(1, width=150, anchor=tk.CENTER)
        tree.column(2, width=150, anchor=tk.CENTER)
        tree.column(3, width=150, anchor=tk.CENTER)
        tree.column(4, width=150, anchor=tk.CENTER)

        tree.tag_configure('odd', background='#ccffff')

        self.populate_tree(Database.fetch_details('', '', 'F'))

    def populate_tree(self, query_results):
        # Populate the tree view with the retrieved data
        tree = self._tree
        for query_entry in query_results:
            tree.insert(parent ='', index='end', values=(query_entry[0], query_entry[1], query_entry[2], query_entry[3], query_entry[4]))


    def search_entry(self):
        tree = self._tree
        tree.delete(*tree.get_children())
        showName = self._name_entry.get()
        showYear = self._year_entry.get()
        print(type(showYear))
        if self._radio_male.instate(['selected']):
            gender = 'M'
        else:
            gender = 'F'
        results_list = Database.fetch_details(showName, showYear, gender)
        self.populate_tree(results_list)

    def clear_entry(self):
        self._name_entry.delete(0, tk.END)
        self._year_entry.delete(0, tk.END)
        self._radio_female.invoke()
        tree = self._tree
        tree.delete(*tree.get_children())
        self.populate_tree(Database.fetch_details('', '', 'F'))

    def exit_program(self):
        if messagebox.askokcancel("Exit", "Are you sure you want to exit?"):
            self.mainwindow.destroy()
    @staticmethod
    def detail_to_tuple(detail):
        # n.Name, ygt.Year, ygt.Gender, nc.NameCount, ygt.Total
        return (
            detail.get_name(),
            detail.get_year(),
            detail.get_gender(),
            detail.get_nameCount(),
            detail.get_total()
        )

    @staticmethod
    def fixed_map(option, style):
        # Fix for setting text colour for Tkinter 8.6.9
        # From: https://core.tcl.tk/tk/info/509cafafae
        #
        # Returns the style map for 'option' with any styles starting with
        # ('!disabled', '!selected', ...) filtered out.

        # style.map() returns an empty list for missing options, so this
        # should be future-safe.
        return [elm for elm in style.map('Treeview', query_opt=option) if
                elm[:2] != ('!disabled', '!selected')]
    @staticmethod
    def create_treeview_style():
        # noinspection PyUnresolvedReferences
        style = tk.ttk.Style()
        style.map('Treeview', foreground=BrowserApp.fixed_map('foreground', style),
                  background=BrowserApp.fixed_map('background', style))

        style.element_create("Custom.Treeheading.border", "from", "default")
        style.layout("Custom.Treeview.Heading", [
            ("Custom.Treeheading.cell", {'sticky': 'nswe'}),
            ("Custom.Treeheading.border", {'sticky': 'nswe', 'children': [
                ("Custom.Treeheading.padding", {'sticky': 'nswe', 'children': [
                    ("Custom.Treeheading.image", {'side': 'right', 'sticky': ''}),
                    ("Custom.Treeheading.text", {'sticky': 'we'})
                ]})
            ]}),
        ])
        style.configure("Custom.Treeview.Heading",
                        background="dark blue", foreground="white", relief="flat", font=('Arial Black', 10, 'bold'))
        style.map("Custom.Treeview.Heading",
                  relief=[('active', 'groove'), ('pressed', 'sunken')])
        return style
    def run(self):
        self.mainwindow.mainloop()


if __name__ == "__main__":
    root = tk.Tk()
    root.title("Lab9 Database")
    app = BrowserApp(root)
    app.run()
