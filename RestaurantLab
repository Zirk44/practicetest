#******************************************************************************
# Author:           Kris Meyer
# Lab:              Lab9
# Date:             11/29/2023
# Description:      The purpose of this lab is to define a class to create
#                   objects. Classes will contain fields (variables)
#                   and methods (functions).
# Input:            number of guests, type of recipe, add recipe with
#                   ingredients, unit of measure, and amounts.
# Output:           ingredients list for recipes based on guest number
# Sources:          Lab 9 instructions
#******************************************************************************

# Welcome to the Quick Shopping List Creator!
# Please follow the instructions below to see the list of ingredients needed :)

# while choice = "y"
#   What is the Recipe's name?
#   What is the first ingredient?
#   What is the unit of measure? (must be cups, tablespoons or pieces)
#   If other entry entered, prompt again must be cups, tablespoons or pieces
#   How much should be added per each guest?
#   Ask if there's another ingredient to add?
#   If yes, ask what is the next ingredient?
#   Loop until no
#   If no, say the recipe has been successfully added!

# Calculation is amount of ingredients per recipe * number of people eating
# Want the outcomes to be expressed as a receipt EX: 1/3 cup of flour, 1 full banana

# Below is your shopping list!
# Print List
# EX:
# Recipe #1 Pancakes: (per person)
# 1/2 cup of pancake mix
# 1/2 cup of water
# 1/10 of butter stick
# 1/4 of maple syrup

# Does anyone want another recipe?
# If yes, prompt for recipe and guests again
# If no, print outro

# Bon Appetit! - outro

import Valid as v

class Ingredients:
    __ingredients = ""
    __measure = 0
    __guests = 0
    __uom = ""

    def __init__(self, i, m, uom):
        self.__ing = i
        self.__measure = m
        self.__uom = uom

    def get__ingredients(self):
        return self.__ingredients

    def get_guests(self):
        return self.__guests

    def get_measure(self):
        return self.__measure

    def get_uom(self):
        return self.__uom

    def set__ingredients(self, i):
        self.__ingredients = i
        return self.__ingredients

    def set_guests(self, g):
        self.__guests = g
        return self.__guests

    def set_measure(self, m):
        self.__measure = m
        return self.__measure

    def set_uom(self, uom):
        self.__uom = uom
        return self.__uom

    def __str__(self):
        return str(self.__guests * self.__measure) + " " + self.__uom + " of " + self.__ing

class Recipe:
    __recipe = ""
    __ingList = []

    def __init__(self, r, ingList):
        self.__recipe = r
        self.__ingList = ingList

    def get_recipe(self):
        return self.__recipe

    def get_ingList(self):
        return self.__ingList

    def set_recipe(self):
        return self.__recipe
        r = self.__recipe

    def set_ingList(self):
        return self.__ingList
        ing = self.__ingList

    def __str__(self):
        ingStr = ""
        for i in self.__ingList:
            ingStr = ingStr + i.__str__() + "\n \t"
        return self.__recipe + ":" + "\n \t" + ingStr

def main():
    # Variables
    guests = 0
    hungry = "y"
    getRecipe = []

    #Intro
    run_intro()

    #Menu Options
    options()

    #Selection of choices from menu:
    choice = v.get_integer("Please enter the number of the selected option: ")
    while choice < 1 or choice > 4:
        print("Please select from option 1 through 4!")
    while choice >= 1 or choice <= 4:
        if choice == 1:
            print("\nRecipes:")
            print("------------------")
            for r in getRecipe:
                print(r.get_recipe())
            print("\n")
        elif choice == 2:
            view_recipe(getRecipe)
        elif choice == 3:
            get_new_recipe(getRecipe)
        elif choice == 4:
            options()
        elif choice == 5:
            print("Thank you, Bon Appetit!")
            break
        else:
            print("Invalid choice, try again!\n")
        choice = v.get_integer("Please enter the number of the selected option: ")

def run_intro():
    """
    Output a friendly welcome introduction to the program.
    :return: intro
    """
    print("Welcome to the Quick Shopping List Creator!")
def options():
    # 1 = Show a list of the recipe names available in the program
    # 2 = Ask for the recipe and number of guests, output the list of ingredients based on guests
    # 3 = Add a recipe, input the ingredients, measurement and uom of each to add to recipe
    # 4 = Show the menu options again
    # 5 = Exit the program

    ops = ("1. View Current Recipes"
           "\n2. Get Recipe Ingredients"
           "\n3. Enter New Recipe"
           "\n4. View Menu Options Again"
           "\n5. Exit")
    print(ops)
def view_recipe(getRecipe):
    # Ask what recipe they want to see ingredients for
    # Ask how many guests
    # Print the output of ingredients * number of guests
    rec = v.get_string("What recipe would you like to view? ").capitalize()
    heads = v.get_integer("How many guests are there? ")
    for ex in getRecipe:
        if ex.get_recipe() == rec:
            for i in ex.get_ingList():
                i.set_guests(heads)
            print(ex.__str__())
    else:
        print("Sorry!  We don't have that recipe yet :(")
    get_hungry()

def get_new_recipe(getRecipe):
    # 3 = Add a recipe, input the ingredients, measurement and uom of each to add to recipe
    r = v.get_string("What is the new recipe's name? ").capitalize()
    il = get_ing()
    newRecipe = Recipe(r, il)
    getRecipe.append(newRecipe)

def get_ing():
    # loop to ask more ingredients
    ingList = []
    ni = v.get_string("What is the first ingredients's name? ")
    me = v.get_string("How is it measured? (cups, tablespoons or pieces)? ")
    gu = v.get_real("How many of each measurement will be for a guest? (EX: 3 for 3 cups) ")
    ingList.append(Ingredients(ni, gu, me))
    ing = v.get_y_or_n("Are there more ingredients to be added? (y/n) ")
    while ing == "y":
        ni = v.get_string("What is the new ingredients's name? ")
        me = v.get_string("How is it measured? (cups, tablespoons or pieces)? ")
        gu = v.get_real("How many of each measurement will be for a guest? (EX: 3 for 3 cups) ")
        ingList.append(Ingredients(ni, gu, me))
        ing = v.get_y_or_n("Are there more ingredients to be added? (y/n) ")
    print("The recipe has been successfully added!\n")
    return ingList
# def __init__(self, i, m, uom):

def get_hungry():
    """
    The customer inputs y or n
    :input: y, n
    :return: request for another recipe
    """
    return v.get_y_or_n("\nDoes anyone want another recipe (y/n): ")

main()
